# Dockerfile to build a manylinux 2010 compliant cross-compiler.
#
# Builds a devtoolset gcc/libstdc++ that targets manylinux 2010 compatible
# glibc (2.12) and system libstdc++ (4.4).
#
# This Dockerfile originated from To push a new version, run:
# $ docker build -f Dockerfile.rbe.ubuntu16.04-manylinux2010 \
#  --tag "gcr.io/tensorflow-testing/nosla-ubuntu16.04-manylinux2010" .
# $ docker push gcr.io/tensorflow-testing/nosla-ubuntu16.04-manylinux2010

FROM ubuntu:16.04 as devtoolset

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
      bzip2 \
      cpio \
      file \
      flex \
      g++ \
      make \
      patch \
      rpm2cpio \
      unar \
      wget \
      tar \
      xz-utils \
      && \
    rm -rf /var/lib/apt/lists/*

ADD devtoolset/fixlinks.sh fixlinks.sh
ADD devtoolset/build_devtoolset.sh build_devtoolset.sh
ADD devtoolset/rpm-patch.sh rpm-patch.sh

# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-7 in /dt7.
RUN /build_devtoolset.sh devtoolset-7 /dt7
# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-8 in /dt8.
RUN /build_devtoolset.sh devtoolset-8 /dt8

# TODO(klimek): Split up into two different docker images.
FROM ubuntu:16.04
COPY --from=devtoolset /dt7 /dt7
COPY --from=devtoolset /dt8 /dt8

# Copy and run the install scripts.
COPY install/*.sh /install/
ARG DEBIAN_FRONTEND=noninteractive
RUN /install/install_bootstrap_deb_packages.sh
RUN /install/install_deb_packages.sh
RUN /install/install_clang.sh
#RUN /install/install_bazel.sh

# Install golang.
RUN /install/install_golang.sh
env GOROOT=/usr/local/go
env PATH=$GOROOT/bin:$PATH

#INSTALL PYTHON
ARG PYTHON_VERSION="3.5"

# Install python
RUN /install/install_manylinux_python.sh ${PYTHON_VERSION}

RUN /install/install_manylinux_pip.sh ${PYTHON_VERSION}

RUN /install/install_patchelf.sh

ENV JAVA_HOME /usr/lib/jvm/java-1.8.0




