/*This job:
1. Clones tensorflow/tensorflow at a given commit
2. Calls the 'tensorflow/tools/ci_build/linux/mkl/build-dev-container.sh' script
3. Builds development container from the Development Branch parameter

This job accepts params:
- String Type :: CHECKOUT_BRANCH :: A string branch name to clone tensorflow/tensorflow from
- String Type :: DEVEL_BRANCH :: A string branch name to checkout code for Release
- String Type :: BUILD_VERSION :: A string build version tag to be added to the image tag
*/

static final String buildLabel = 'bdw'
static final String TF_DOCKER_BUILD_DEVEL_BRANCH = params.get('DEVEL_BRANCH', 'v1.8.0')
static final String TF_DOCKER_BUILD_VERSION = params.get('BUILD_VERSION', '1.8.0')
static final String buildScript = "TF_DOCKER_BUILD_DEVEL_BRANCH=${TF_DOCKER_BUILD_DEVEL_BRANCH} TF_DOCKER_BUILD_VERSION=${TF_DOCKER_BUILD_VERSION} tensorflow/tools/ci_build/linux/mkl/build-dev-container.sh"
static final String branchName = params.get('CHECKOUT_BRANCH', 'master')
//static final ArrayList dockerImages = [ 'intel-mkl/tensorflow:1.8.0-devel-mkl' , 'intel-mkl/tensorflow:1.8.0-devel-mkl-py3' ]  //Image names generated by build-dev-container.sh

static final String docker_image_name = 'intel-mkl/tensorflow'  //Image names generated by build-dev-container.sh

//AVX containers
static final String dockerImageTagPY2 = "${TF_DOCKER_BUILD_VERSION}-devel-mkl"  //Tags generated by build-dev-container.sh based on TF_DOCKER_BUILD_VERSION
static final String dockerImageTagPY3 = "${TF_DOCKER_BUILD_VERSION}-devel-mkl-py3"   //Tags generated by build-dev-container.sh based on TF_DOCKER_BUILD_VERSION
static final String dockerImagePY2Full = "${docker_image_name}:${dockerImageTagPY2}"
static final String dockerImagePY3Full = "${docker_image_name}:${dockerImageTagPY3}"
static final ArrayList dockerImages = [ "${dockerImagePY2Full}" , "${dockerImagePY3Full}" ]

//AVX2 containers
static final String dockerImageTagAVX2PY2 = "${TF_DOCKER_BUILD_VERSION}-avx2-devel-mkl"  //Tags generated by build-dev-container.sh based on TF_DOCKER_BUILD_VERSION
static final String dockerImageTagAVX2PY3 = "${TF_DOCKER_BUILD_VERSION}-avx2-devel-mkl-py3"   //Tags generated by build-dev-container.sh based on TF_DOCKER_BUILD_VERSION
static final String dockerImageAVX2PY2Full = "${docker_image_name}:${dockerImageTagAVX2PY2}"
static final String dockerImageAVX2PY3Full = "${docker_image_name}:${dockerImageTagAVX2PY3}"
static final ArrayList dockerImagesAVX2 = [ "${dockerImageAVX2PY2Full}" , "${dockerImageAVX2PY3Full}" ]


node(buildLabel) {
    stage('Cleanup') {
        sh '''#!/bin/bash -x
            cd $WORKSPACE
            sudo rm -rf *
            docker stop $(docker ps -a -q)
            echo Y | docker system prune -a
        '''
    }
    stage('Checkout') {
        deleteDir()
        checkout([$class: 'GitSCM', branches: [[name: branchName]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '5d094940-c7a0-42a8-8417-1ecc9a7bd947', url: 'https://github.com/tensorflow/tensorflow']]])

	}
    stage('Build') {
        sh buildScript
    }
	stage('Test'){
		//AVX containers
		for (dockerImage in dockerImages) {
			withEnv(["dockerImage=$dockerImage"]) {
		        sh '''#!/bin/bash -x
		        docker images ${dockerImage}
		        '''
		    }
		}
		//AVX2 containers
		for (dockerImage in dockerImagesAVX2) {
			withEnv(["dockerImage=$dockerImage"]) {
		        sh '''#!/bin/bash -x
		        docker images ${dockerImage}
		        '''
		    }
		}
	}
	stage('Archive') {
		//AVX whls
        for (dockerImage in dockerImages) {
            docker.image(dockerImage).inside('-v $WORKSPACE:/output -u root') {
                sh '''#!/bin/bash -x
                ls /output
                touch /tmp/pip*/*.whl && ls /tmp/pip*
                cp /tmp/pip*/*.whl /output
                whl_name=$(basename /tmp/pip*/*.whl)
                echo "${whl_name}"
                sha256sum /tmp/pip*/*.whl | awk '{print $1}' > ${whl_name}.sha256sum
                '''
                archiveArtifacts allowEmptyArchive: false, artifacts: '*.whl', fingerprint: true
                archiveArtifacts allowEmptyArchive: false, artifacts: '*.sha256sum', fingerprint: true
            }
        }
		//AVX2 whls
		for (dockerImage in dockerImagesAVX2) {
            docker.image(dockerImage).inside('-v $WORKSPACE:/output -u root') {
                sh '''#!/bin/bash -x
                ls /output
                touch /tmp/pip*/*.whl && ls /tmp/pip*
				whl_name=$(basename /tmp/pip*/*.whl)
				updated_whl_name="${whl_name}-avx2"
                echo "${updated_whl_name}"
                cp /tmp/pip*/*.whl /output/${updated_whl_name}.whl
                sha256sum /tmp/pip*/*.whl | awk '{print $1}' > ${updated_whl_name}.sha256sum
                '''
                archiveArtifacts allowEmptyArchive: false, artifacts: '*.whl', fingerprint: true
                archiveArtifacts allowEmptyArchive: false, artifacts: '*.sha256sum', fingerprint: true
            }
        }
    }
}

